
static int __init riscv_timer_init_dt(struct device_node *n)
{
        int cpuid, hartid, error;
        struct device_node *child;
        struct irq_domain *domain;
 
        hartid = riscv_of_processor_hartid(n);//获取 node 所在的hartid
        if (hartid < 0) {
                pr_warn("Not valid hartid for node [%pOF] error = [%d]\n",
                        n, hartid);
                return hartid;
        }
 
        cpuid = riscv_hartid_to_cpuid(hartid);//获取 cpu id
        if (cpuid < 0) {
                pr_warn("Invalid cpuid for hartid [%d]\n", hartid);
                return cpuid;
        }
 
        if (cpuid != smp_processor_id())
                return 0;//判断是否未 boot cpu
 
        domain = NULL;
        child = of_get_compatible_child(n, "riscv,cpu-intc");
        if (!child) {//获取中断的 domain
                pr_err("Failed to find INTC node [%pOF]\n", n);
                return -ENODEV;
        }
        domain = irq_find_host(child);
        of_node_put(child);
        if (!domain) {
                pr_err("Failed to find IRQ domain for node [%pOF]\n", n);
                return -ENODEV;
        }
 
        riscv_clock_event_irq = irq_create_mapping(domain, RV_IRQ_TIMER);//建立中断映射
        if (!riscv_clock_event_irq) {
                pr_err("Failed to map timer interrupt for node [%pOF]\n", n);
                return -ENODEV;
        }
 
        pr_info("%s: Registering clocksource cpuid [%d] hartid [%d]\n",
               __func__, cpuid, hartid);
        error = clocksource_register_hz(&riscv_clocksource, riscv_timebase);//注册 timer
        if (error) {
                pr_err("RISCV timer register failed [%d] for cpu = [%d]\n",
                       error, cpuid);
                return error;
        }
        sched_clock_register(riscv_sched_clock, 64, riscv_timebase);
 
        error = request_percpu_irq(riscv_clock_event_irq,
                                    riscv_timer_interrupt,
                                    "riscv-timer", &riscv_clock_event);
                                    //注册中断处理函数
        if (error) {
                pr_err("registering percpu irq failed [%d]\n", error);
                return error;
        }
 
        error = cpuhp_setup_state(CPUHP_AP_RISCV_TIMER_STARTING,
                         "clockevents/riscv/timer:starting",
                         riscv_timer_starting_cpu, riscv_timer_dying_cpu);//热插拔配置
        if (error)
                pr_err("cpu hp setup state failed for RISCV timer [%d]\n",
                       error);
        return error;
}