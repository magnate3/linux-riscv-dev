#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>


/**
 *  this is a mempool implement
 *  free-list -|     --------------------
               |->   |     |             |
               |-    --------------------
               |     --------------------
               |     |                   |  -> for client use
               |     --------------------
               |     --------------------
               |->   |     |             |
                     --------------------
 */

enum { __ALIGN = 8 };
enum { __MAX_BYTES = 128};
enum { __NFREELISTS = __MAX_BYTES/__ALIGN };

union obj_t{
    union obj *free_list_link;
    char client_data[1];
};
typedef union obj_t obj;
//-------------------------------------

typedef struct mem_pool_manager_t{
    obj *volatile free_list[__NFREELISTS]; //free list for mem
    char *start_free;       //mempool start position
    char *end_free;         //mempoll end position
    size_t heap_size;
}mem_pool_manager;
//-------------------------------------
inline size_t ROUND_UP(size_t bytes){
    return ((bytes + __ALIGN-1 ) & ~(__ALIGN - 1));
}

inline size_t FREELIST_INDEX(size_t bytes){
    return ((bytes + __ALIGN-1)/__ALIGN - 1);
}

void *chunk_alloc(mem_pool_manager *pmanager, size_t size, int *nobjs){
    if(0 == size)
        return NULL;
    if(NULL == nobjs)
        return NULL;
    if(NULL == pmanager)
        return NULL;

    char *result;
    size_t total_bytes = size * (*nobjs);
    size_t bytes_left = pmanager->end_free - pmanager->start_free;

    if(bytes_left >= total_bytes){
        //够用
        result = pmanager->start_free;

        pmanager->start_free += total_bytes;
        return result;
    }else if(bytes_left >= size){
        //内存池剩余空间不能完全满足需求量，但足够供应一个以上的区块
        *nobjs = bytes_left / size;
        result = pmanager->start_free;

        pmanager->start_free += (size*(*nobjs));

        return result;
    }else{
        //内存池剩余的空间连一个区块都无法提供
        size_t bytes_to_get = 2 *total_bytes + ROUND_UP(pmanager->heap_size);

        if(bytes_left > 0){
            //内存池内还有一些零头，先配给适当的free list
            obj *volatile *my_free_list = pmanager->free_list + FREELIST_INDEX(bytes_left);
            ((obj *)pmanager->start_free)->free_list_link = *my_free_list;

            (*my_free_list)->free_list_link = (obj *)(pmanager->start_free);
        }

        //配置heap 空间，用来补充内存池
        pmanager->start_free = (char *)malloc(bytes_to_get);
        if(0 == pmanager->start_free){
            //malloc failed
            int i;
            obj *volatile *my_free_list, *p;
            //搜索适当的free list 
            for(i = size; i <= __MAX_BYTES; i+= __ALIGN){
                my_free_list = pmanager->free_list + FREELIST_INDEX(i);
                p = *my_free_list;
                if(0 != p){   //free list 内尚有未用区块
                    *my_free_list = p->free_list_link;
                    pmanager->start_free = (char *)p;
                    pmanager->end_free = pmanager->start_free + i;

                    return (chunk_alloc(pmanager, size, nobjs));
                }
            }

            pmanager->end_free = 0;
            assert(0);
        }

        pmanager->end_free = pmanager->start_free + bytes_to_get;
        pmanager->heap_size += bytes_to_get;

        return chunk_alloc(pmanager, size, nobjs);

    }
}

void *refill(mem_pool_manager *pmanager, size_t n){
    if(0 == n)
        return NULL;
    if(NULL == pmanager)
        return NULL;
    
    int nobjs = 20;

    char *chunk = (char *)chunk_alloc(pmanager, n, &nobjs);

    obj *volatile *my_free_list;
    obj *result;
    obj *current_obj, *next_obj;
    int i;
    //如果只获得一个区块，这个区块就分配给调用者，free list 无新节点
    if(1 == nobjs)
        return chunk;

    my_free_list = pmanager->free_list + FREELIST_INDEX(n);
    //以下在chunk空间内建立free list
    result = (obj *)chunk; //这一块准备返回给客户端
    *my_free_list = next_obj = (obj*)(chunk + n);
    //以下将free list的各个节点串联起来
    for(i = 1; i < nobjs; i++){
        current_obj = next_obj;

        next_obj = (obj *)(next_obj + n);

        current_obj->free_list_link = next_obj;
    }

    return result;
}

//-------------------------------------------------
// for use outside
// 
bool mem_pool_init(mem_pool_manager *pmanager){
    
    if(!pmanager){
        return false;
    }

    memset((void *)pmanager, 0, sizeof(*pmanager));

    return true;
}


void *allocate(mem_pool_manager *pmanager, size_t n){
    if(0 == n)
        return NULL;
    if(NULL == pmanager)
        return NULL;

    obj *result = NULL;

    //you get too large memory from me
    if(n > (size_t)__MAX_BYTES)
        return malloc(n);
    
    obj * volatile *my_free_list;
    my_free_list = pmanager->free_list + FREELIST_INDEX(n);

    result = *my_free_list;
    //not find free list for use, so refill it
    if(result == 0){
        void *r = refill(pmanager, ROUND_UP(n));
        return r;
    }

    *my_free_list = result->free_list_link;

    return result;   
}

void deallocate(mem_pool_manager *pmanager, void *p, size_t n){
    if(NULL == p)
        return;
    if(0 == n)
        return;

    obj *volatile *my_free_list;
    obj *q = (obj *)p;

    if(n >__MAX_BYTES){
        free(p);
        return ;
    }
    
    my_free_list = pmanager->free_list + FREELIST_INDEX(n);
    q->free_list_link = (*my_free_list);
    *my_free_list = q;
}

