# 1 "p4srv6.p4"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "p4srv6.p4"
/* Copyright 2017-present Kentaro Ebisawa <ebiken.g@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Written in P4_14 */

# 1 "include/headers.p4" 1
/* Copyright 2017-present Kentaro Ebisawa <ebiken.g@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Written in P4_14 */

@pragma header_ordering ethernet ipv6 ipv6_srh ipv6_srh_segment_list[0] ipv6_srh_segment_list[1] ipv6_srh_segment_list[2] ipv6_srh_segment_list[3] ipv4 tcp udp gtpu gtpu_ipv4 gtpu_ipv6 ipv6_inner

// header defititions

header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}
header ethernet_t ethernet;

header_type ipv4_t {
    fields {
        version : 4;
        ihl : 4;
        diffserv : 8;
        totalLen : 16;
        identification : 16;
        flags : 3;
        fragOffset : 13;
        ttl : 8;
        protocol : 8;
        hdrChecksum : 16;
        srcAddr : 32;
        dstAddr : 32;
    }
}
header ipv4_t ipv4;
header ipv4_t gtpu_ipv4;

header_type ipv6_t {
    fields {
        version : 4;
        trafficClass : 8;
        flowLabel : 20;
        payloadLen : 16;
        nextHdr : 8;
        hopLimit : 8;
        srcAddr : 128;
        dstAddr : 128;
    }
}
header ipv6_t ipv6;
header ipv6_t ipv6_inner;
header ipv6_t gtpu_ipv6;

header_type tcp_t {
    fields {
        srcPort : 16;
        dstPort : 16;
        seqNo : 32;
        ackNo : 32;
        dataOffset : 4;
        res : 4;
        flags : 8;
        window : 16;
        checksum : 16;
        urgentPtr : 16;
    }
}
header tcp_t tcp;

header_type udp_t {
    fields {
        srcPort : 16;
        dstPort : 16;
        length_ : 16;
        checksum : 16;
    }
}
header udp_t udp;
# 19 "p4srv6.p4" 2
# 1 "include/parser.p4" 1
/* Copyright 2017-present Kentaro Ebisawa <ebiken.g@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Written in P4_14 */

/*** parser definition ***/
# 33 "include/parser.p4"
parser parse_tcp {
    extract(tcp);
    return ingress;
}

parser parse_udp {
    extract(udp);
    return select(latest.dstPort) {
        // UDP_PORT_GTPC : parse_gtpc;
        2152 : parse_gtpu;
        default: ingress;
    }
}
parser parse_ipv6 {
 extract(ipv6);
 return select(latest.nextHdr) {
        //IP_PROTOCOLS_ICMP6 : parse_icmp6;
        6 : parse_tcp;
        17 : parse_udp;
        43 : parse_ipv6_srh;
        default: ingress;
 }
}

parser parse_ipv4 {
    extract(ipv4);
    return select(latest.protocol) {
        //IP_PROTOCOLS_ICMP : parse_icmp;
        6 : parse_tcp;
        17 : parse_udp;
        default: ingress;
    }
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        0x0800 : parse_ipv4;
        0x86dd : parse_ipv6;
        default: ingress;
    }
}

parser start {
    return parse_ethernet;
}
# 20 "p4srv6.p4" 2
# 1 "include/srv6.p4" 1
/* Copyright 2017-present Kentaro Ebisawa <ebiken.g@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Written in P4_14 */
/* SRv6 related headers and actions are defined in this file */

///// HEADER //////////////////////////////////////////////
// draft-ietf-6man-segment-routing-header-10
// 3. Segment Routing Extension Header (SRH)
// Optional TLV not defined (yet) for simplisity.
header_type ipv6_srh_t {
    fields {
  nextHeader : 8;
  hdrExtLen : 8;
  routingType : 8;
  segmentsLeft : 8;
  lastEntry : 8;
  flags : 8;
  tag : 16;
 }
}
header ipv6_srh_t ipv6_srh;

header_type ipv6_srh_segment_t {
 fields {
  sid : 128;
 }
}

// +1 for inline mode
header ipv6_srh_segment_t ipv6_srh_segment_list[3 +1];

header_type srv6_meta_t {
 fields {
  teid: 32;
  EndMGTP6E_SRGW : 96;
  segmentsLeft: 8;
  ipv6_payloadLen : 16;
 }
}
metadata srv6_meta_t srv6_meta;

///// PARSER //////////////////////////////////////////////
parser parse_ipv6_srh {
 extract(ipv6_srh);
 return parse_ipv6_srh_seg0;
}
parser parse_ipv6_srh_seg0 {
 extract(ipv6_srh_segment_list[0]);
 return select(ipv6_srh.lastEntry) {
  //0 : ingress;
  0 : parse_ipv6_srh_payload;
  default: parse_ipv6_srh_seg1;
 }
}
parser parse_ipv6_srh_seg1 {
 extract(ipv6_srh_segment_list[1]);
 return select(ipv6_srh.lastEntry) {
  //1 : ingress;
  1 : parse_ipv6_srh_payload;
  default: parse_ipv6_srh_seg2;
 }
}
parser parse_ipv6_srh_seg2 {
 extract(ipv6_srh_segment_list[2]);
 return select(ipv6_srh.lastEntry) {
  //2 : ingress;
  2 : parse_ipv6_srh_payload;
  default: parse_ipv6_srh_seg3;
 }
}
parser parse_ipv6_srh_seg3 {
 extract(ipv6_srh_segment_list[3]);
 // SRH_MAX_SEGMENTS +1 = 4 so this is the last segment in the list.
 //return ingress;
 return parse_ipv6_srh_payload;
}
parser parse_ipv6_srh_payload {
 return select(ipv6_srh.nextHeader) {
  //IP_PROTOCOLS_ICMP : parse_icmp;
  4 : parse_ipv4;
  6 : parse_tcp;
  17 : parse_udp;
  41 : parse_ipv6_inner;
  default: ingress;
 }
}
parser parse_ipv6_inner {
 extract(ipv6_inner);
 return ingress;
}

///// ACTION //////////////////////////////////////////////
action ipv6_srh_insert(proto) {
 // TODO: should we add SRH(8) size here to ipv6.payloadLen, or in each functions?
 add_header(ipv6_srh);
 modify_field(ipv6_srh.nextHeader, proto);
 modify_field(ipv6_srh.hdrExtLen, 0);
 modify_field(ipv6_srh.routingType, 4);
 modify_field(ipv6_srh.segmentsLeft, 0);
 modify_field(ipv6_srh.lastEntry, 0);
 modify_field(ipv6_srh.flags, 0);
 modify_field(ipv6_srh.tag, 0);
}

// original ipv6 will be copied to ipv6_inner.
// ipv6 will be new outer ipv6 header.
action ipv6_encap_ipv6(srcAddr, dstAddr) {
 // ipv6_inner is actually original header. copy it.
 add_header(ipv6_inner);
 copy_header(ipv6_inner, ipv6);
 // update original (outer) header
        subtract_from_field(ipv6.hopLimit,1);
 add_to_field(ipv6.payloadLen, 40); // size of ipv6_inner
 modify_field(ipv6.nextHdr, 41);
 modify_field(ipv6.srcAddr, srcAddr);
 modify_field(ipv6.dstAddr, dstAddr);
}


//// SRv6 Functions
// For "inline" mode:
// 1. dstAddr of received packet will be added to the last segment to traverse (seg[0])
// 2. dstAddr will be modified to the fist segment to traverse (seg[n])
action srv6_T_Insert1(sid0) {
    ipv6_srh_insert(ipv6.nextHdr);
    add_header(ipv6_srh_segment_list[0]);
    modify_field(ipv6_srh_segment_list[0].sid, ipv6.dstAddr);
    add_header(ipv6_srh_segment_list[1]);
    modify_field(ipv6_srh_segment_list[1].sid, sid0);
    modify_field(ipv6_srh.hdrExtLen, 4); // TODO
    modify_field(ipv6_srh.segmentsLeft, 1);
    modify_field(ipv6_srh.lastEntry, 1);
    // update original ipv6 headers
    modify_field(ipv6.nextHdr, 43);
    modify_field(ipv6.dstAddr, sid0);
    add_to_field(ipv6.payloadLen, 8+16*2); // SRH(8)+Seg(16)*2
}
action srv6_T_Insert2(sid0, sid1) {
    ipv6_srh_insert(ipv6.nextHdr);
    add_header(ipv6_srh_segment_list[0]);
    modify_field(ipv6_srh_segment_list[0].sid, ipv6.dstAddr);
    add_header(ipv6_srh_segment_list[1]);
    modify_field(ipv6_srh_segment_list[1].sid, sid1);
    add_header(ipv6_srh_segment_list[2]);
    modify_field(ipv6_srh_segment_list[2].sid, sid0);
    modify_field(ipv6_srh.hdrExtLen, 6);
    modify_field(ipv6_srh.segmentsLeft, 2);
    modify_field(ipv6_srh.lastEntry, 2);
    // update original ipv6 headers
    modify_field(ipv6.nextHdr, 43);
    modify_field(ipv6.dstAddr, sid0);
    add_to_field(ipv6.payloadLen, 8+16*3); // SRH(8)+Seg(16)*3
}
action srv6_T_Insert3(sid0, sid1, sid2) {
 ipv6_srh_insert(ipv6.nextHdr);
 add_header(ipv6_srh_segment_list[0]);
 modify_field(ipv6_srh_segment_list[0].sid, ipv6.dstAddr);
 add_header(ipv6_srh_segment_list[1]);
 modify_field(ipv6_srh_segment_list[1].sid, sid2);
 add_header(ipv6_srh_segment_list[2]);
 modify_field(ipv6_srh_segment_list[2].sid, sid1);
 add_header(ipv6_srh_segment_list[3]);
 modify_field(ipv6_srh_segment_list[3].sid, sid0);
 modify_field(ipv6_srh.hdrExtLen, 8);
 modify_field(ipv6_srh.segmentsLeft, 3);
 modify_field(ipv6_srh.lastEntry, 3);
 // update original ipv6 headers
 modify_field(ipv6.nextHdr, 43);
 modify_field(ipv6.dstAddr, sid0);
 add_to_field(ipv6.payloadLen, 8+16*4); // SRH(8)+Seg(16)*4
}

action srv6_T_Encaps1(srcAddr, sid0) {
 ipv6_encap_ipv6(srcAddr, sid0); // dstAddr==sid0
 ipv6_srh_insert(41);
 add_header(ipv6_srh_segment_list[0]);
 modify_field(ipv6_srh_segment_list[0].sid, sid0);
    modify_field(ipv6_srh.hdrExtLen, 2); // 2bytes*(number of seg)
    modify_field(ipv6_srh.segmentsLeft, 0);
    modify_field(ipv6_srh.lastEntry, 0);
 // update original ipv6 headers
 modify_field(ipv6.nextHdr, 43);
 modify_field(ipv6.dstAddr, sid0);
 add_to_field(ipv6.payloadLen, 8+16*1); // SRH(8)+Seg(16)*1
}
action srv6_T_Encaps2(srcAddr, sid0, sid1) {
 ipv6_encap_ipv6(srcAddr, sid0); // dstAddr==sid0
 ipv6_srh_insert(41);
 modify_field(ipv6.nextHdr, 43);
 add_header(ipv6_srh_segment_list[0]);
 modify_field(ipv6_srh_segment_list[0].sid, sid1);
 add_header(ipv6_srh_segment_list[1]);
 modify_field(ipv6_srh_segment_list[1].sid, sid0);
    modify_field(ipv6_srh.hdrExtLen, 4); // 2bytes*(number of seg)
    modify_field(ipv6_srh.segmentsLeft, 1);
    modify_field(ipv6_srh.lastEntry, 1);
 // update original ipv6 headers
 modify_field(ipv6.nextHdr, 43);
 modify_field(ipv6.dstAddr, sid0);
 add_to_field(ipv6.payloadLen, 8+16*2); // SRH(8)+Seg(16)*2
}
action srv6_T_Encaps3(srcAddr, sid0, sid1, sid2) {
 ipv6_encap_ipv6(srcAddr, sid0); // dstAddr==sid0
 ipv6_srh_insert(41);
 modify_field(ipv6.nextHdr, 43);
 add_header(ipv6_srh_segment_list[0]);
 modify_field(ipv6_srh_segment_list[0].sid, sid2);
 add_header(ipv6_srh_segment_list[1]);
 modify_field(ipv6_srh_segment_list[1].sid, sid1);
 add_header(ipv6_srh_segment_list[2]);
 modify_field(ipv6_srh_segment_list[2].sid, sid0);
    modify_field(ipv6_srh.hdrExtLen, 6); // 2bytes*(number of seg)
    modify_field(ipv6_srh.segmentsLeft, 2);
    modify_field(ipv6_srh.lastEntry, 2);
 // update original ipv6 headers
 modify_field(ipv6.nextHdr, 43);
 modify_field(ipv6.dstAddr, sid0);
 add_to_field(ipv6.payloadLen, 8+16*3); // SRH(8)+Seg(16)*3
}

action srv6_T_Encaps_Red2(srcAddr, sid0, sid1) {
    ipv6_encap_ipv6(srcAddr, sid0); // dstAddr==sid0
    ipv6_srh_insert(41);
    modify_field(ipv6.nextHdr, 43);
    add_header(ipv6_srh_segment_list[0]);
    modify_field(ipv6_srh_segment_list[0].sid, sid1);
    modify_field(ipv6_srh.hdrExtLen, 2); // 2bytes*(number of seg)
    modify_field(ipv6_srh.segmentsLeft, 1);
    modify_field(ipv6_srh.lastEntry, 0);
    // update original ipv6 headers
    modify_field(ipv6.nextHdr, 43);
    modify_field(ipv6.dstAddr, sid0);
    add_to_field(ipv6.payloadLen, 8+16*1); // SRH(8)+Seg(16)*1
}
action srv6_T_Encaps_Red3(srcAddr, sid0, sid1, sid2) {
    ipv6_encap_ipv6(srcAddr, sid0); // dstAddr==sid0
    ipv6_srh_insert(41);
    modify_field(ipv6.nextHdr, 43);
    add_header(ipv6_srh_segment_list[0]);
    modify_field(ipv6_srh_segment_list[0].sid, sid2);
    add_header(ipv6_srh_segment_list[1]);
    modify_field(ipv6_srh_segment_list[1].sid, sid1);
    modify_field(ipv6_srh.hdrExtLen, 4); // 2bytes*(number of seg)
    modify_field(ipv6_srh.segmentsLeft, 2);
    modify_field(ipv6_srh.lastEntry, 1);
    // update original ipv6 headers
    modify_field(ipv6.nextHdr, 43);
    modify_field(ipv6.dstAddr, sid0);
    add_to_field(ipv6.payloadLen, 8+16*2); // SRH(8)+Seg(16)*2
}

///// End.* functions

// 4.1.  End: Endpoint
// 1.   IF NH=SRH and SL > 0
// 2.      decrement SL
// 3.      update the IPv6 DA with SRH[SL]
// 4.      FIB lookup on the updated DA                            ;; Ref1
// 5.      forward accordingly to the matched entry                ;; Ref2
// 6.   ELSE
// 7.      drop the packet                                         ;; Ref3
//FIXME: Having End0 and End1 is a durty hack to workaround p4c error for below.
//  modify_field(ipv6.dstAddr, ipv6_srh_segment_list[ipv6_srh.segmentsLeft].sid);
//  Most likely storing ipv6_srh.segmentsLeft in metadata to be used will solve this.
action srv6_End0() {
 //TODO: Implement PSP
 //TODO: Flag packet drop if SL=0 (per Ref3)
 subtract_from_field(ipv6_srh.segmentsLeft, 1);
 modify_field(ipv6.dstAddr, ipv6_srh_segment_list[0].sid); // FIXME
}
action srv6_End1() {
 subtract_from_field(ipv6_srh.segmentsLeft, 1);
 modify_field(ipv6.dstAddr, ipv6_srh_segment_list[1].sid); // FIXME
}

// 4.10. End.DT6: Endpoint with decapsulation and specific IPv6 table lookup
// 1. IF NH=SRH and SL > 0
// 2.   drop the packet ;; Ref1
// 3. ELSE IF ENH = 41 ;; Ref2
// 4.   pop the (outer) IPv6 header and its extension headers
// 5.   lookup the exposed inner IPv6 DA in IPv6 table T
// 6.   forward via the matched table entry
// 7. ELSE
// 8.   drop the packet
action srv6_End_DT6() {
 copy_header(ipv6, ipv6_inner);
 remove_header(ipv6_srh);
 // remove all possible SIDs regardless of if it actually exists
 // not sure if this works on non-BMv2 switches (i.e. ASIC,NPU,FPGA)
 remove_header(ipv6_srh_segment_list[0]);
 remove_header(ipv6_srh_segment_list[1]);
 remove_header(ipv6_srh_segment_list[2]);
 remove_header(ipv6_srh_segment_list[3]);
 remove_header(ipv6_inner);
 // TODO: Add flag to Lookup IPv6 Table specific to the SID
}

///// End.M.* functions
action srv6_End_M_GTP6_D2(srcAddr, sid0, sid1) {
 remove_header(udp);
 remove_header(gtpu);
    subtract_from_field(ipv6.payloadLen, 16); // UDP(8)+GTPU(8)
    modify_field(ipv6.nextHdr, 43);
    add_to_field(ipv6.payloadLen, 8+16*1); // SRH(8)+Seg(16)*1
    ipv6_srh_insert(0); // push srh with nextHeader=0
 // TODO: support non-IPv6(41) payload
    modify_field(ipv6_srh.nextHeader, 41);
 add_header(ipv6_srh_segment_list[0]);
    modify_field(ipv6_srh_segment_list[0].sid, sid1);
 // End.M.GTP6.D use seg0 as DA, but does NOT include it in the seg list.
    modify_field(ipv6_srh.hdrExtLen, 2); // 2bytes*(number of seg)
    modify_field(ipv6_srh.segmentsLeft, 1);
    modify_field(ipv6_srh.lastEntry, 0); // sid0 is not included thus 1 smaller.
 // 4. set the outer IPv6 SA to A
    modify_field(ipv6.srcAddr, srcAddr);
 // 5. set the outer IPv6 DA to S1
    modify_field(ipv6.dstAddr, sid0);
 // 6. forward according to the first segment of the SRv6 Policy
}
action srv6_End_M_GTP6_D3(srcAddr, sid0, sid1, sid2) {
 // 2. pop the IP, UDP and GTP headers
 //   Size information in the original IP header is required.
 //   Thus, just pop UDP/GTP header and keep original IP header.
 remove_header(udp);
 remove_header(gtpu);
    subtract_from_field(ipv6.payloadLen, 16); // UDP(8)+GTPU(8)
 // 3. push a new IPv6 header with its own SRH <S2, S3>
 //   Update exsiting (outer) IPv6 header
    modify_field(ipv6.nextHdr, 43);
    add_to_field(ipv6.payloadLen, 8+16*2); // SRH(8)+Seg(16)*2
    ipv6_srh_insert(0); // push srh with nextHeader=0
 // TODO: support non-IPv6(41) payload
    modify_field(ipv6_srh.nextHeader, 41);
 add_header(ipv6_srh_segment_list[0]);
    modify_field(ipv6_srh_segment_list[0].sid, sid2);
    add_header(ipv6_srh_segment_list[1]);
    modify_field(ipv6_srh_segment_list[1].sid, sid1);
 // End.M.GTP6.D use seg0 as DA, but does NOT include it in the seg list.
    modify_field(ipv6_srh.hdrExtLen, 4); // 2bytes*(number of seg)
    modify_field(ipv6_srh.segmentsLeft, 2);
    modify_field(ipv6_srh.lastEntry, 1); // sid0 is not included thus 1 smaller.
 // 4. set the outer IPv6 SA to A
    modify_field(ipv6.srcAddr, srcAddr);
 // 5. set the outer IPv6 DA to S1
    modify_field(ipv6.dstAddr, sid0);
 // 6. forward according to the first segment of the SRv6 Policy
}
action srv6_End_M_GTP6_E(srcAddr) {
    // 2.    decrement SL
 subtract_from_field(ipv6_srh.segmentsLeft, 1);
 // store SRGW to meta data. dstAddr = SRGW::TEID
 // shift_right(srv6_meta.EndMGTP6E_SRGW, ipv6.dstAddr, 32);
 modify_field(ipv6.srcAddr, srcAddr);
    // 3.    store SRH[SL] in variable new_DA
 // srv6_meta.segmentsLeft = ipv6_srh.segmentsLeft;
    // 4.    store TEID in variable new_TEID
 bit_and(srv6_meta.teid, 0x000000000000000000000000ffffffff, ipv6.dstAddr);
    // 5.    pop IP header and all it's extension headers
 // don't pop IPv6 header. will reuse it.
 remove_header(ipv6_srh);
 remove_header(ipv6_srh_segment_list[0]);
 remove_header(ipv6_srh_segment_list[1]);
 remove_header(ipv6_srh_segment_list[2]);
 remove_header(ipv6_srh_segment_list[3]);
    // 7.    set IPv6 DA to new_DA
 // Maybe we need table to call srv6_End_M_GTP6_E1~3 based on SL,
 // But let's assume SL=1 when packet reaches SRGW and SL[0] is gNB addr.
 modify_field(ipv6.dstAddr, ipv6_srh_segment_list[0].sid);
 // Adjust IP length: UDP(8)+GTP(8) - ( SRH(8) + SEG(16)*(n+1) )
 srv6_meta.ipv6_payloadLen = ipv6.payloadLen+8+8-8-16; // TODO
 modify_field(ipv6.payloadLen, srv6_meta.ipv6_payloadLen);
 modify_field(ipv6.nextHdr, 17);
    // 6.    push new IPv6 header and GTP-U header
 add_header(udp);
 add_header(gtpu);
 // Although identical, you have to add gtpu_ipv6 and remove ipv6_inner
 // to help deparser to understand it would come after gtpu_ipv6 header.
 add_header(gtpu_ipv6);
 copy_header(gtpu_ipv6, ipv6_inner);
 remove_header(ipv6_inner);

    modify_field(udp.srcPort, 1000); // TODO: generate from flow label, or random??
    modify_field(udp.dstPort, 2152);
 // ipv6.payloadLen does not include ipv6 header. udp.len does include udp header.
 // Thus, udp.length = ipv6.payloadLen.
    modify_field(udp.length_, ipv6.payloadLen);
 // TODO: update UDP checksum
    // 8.    set GTP_TEID to new_TEID
 modify_field(gtpu.teid, srv6_meta.teid);
    modify_field(gtpu.flags, 0x30);
    modify_field(gtpu.type, 255); // G-PDU(255)
 // gtpu.length length of payload and optional fields.
 // exclude udp(8) and 8 byte mandatory field (including teid) 
    modify_field(gtpu.length, udp.length_-16);
    // 9.    lookup the new_DA and forward the packet accordingly
}
# 21 "p4srv6.p4" 2
# 1 "include/gtp.p4" 1
/* Copyright 2017-present Kentaro Ebisawa <ebiken.g@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Written in P4_14 */
/* GTP GPRS Tunneling Protocol related headers and actions are defined in this file */

///// HEADER //////////////////////////////////////////////

//// GTPv1 User Data
// flags consists of below bits.
//   [flag field name]      : typical GTPv1U value
//   Version(3bits)         : 1 (GTPv1)
//   Protocol Type          : 1 (GTP)
//   Reserved               : 0 (must be 0)
//   Extention (E)          : 0
//   Sequence number (S)    : 0
//   N-PDU number flag (PN) : 0
header_type gtpu_t {
    fields { // 8bytes
  flags : 8;
  type : 8;
  length : 16;
  teid : 32;
 }
}
header gtpu_t gtpu;

///// PARSER //////////////////////////////////////////////

parser parse_gtpu {
    extract(gtpu);
 return ingress;
 return select(current(0,4)) { // version field
  0x04 : parse_gtpu_ipv4;
  0x06 : parse_gtpu_ipv6;
 }
}
parser parse_gtpu_ipv4 {
 extract(gtpu_ipv4);
 return ingress;
}
parser parse_gtpu_ipv6 {
 extract(gtpu_ipv6);
 return ingress;
}

///// ACTIONS /////////////////////////////////////////////
action gtpu_encap_v6(srcAddr, dstAddr, srcPort, dstPort, type, teid) {
 // ethernet|ipv6 => ethernet|ipv6(new)|udp|gtpu|gtpu_ipv6(original)
    add_header(udp);
    add_header(gtpu);
    add_header(gtpu_ipv6);
    copy_header(gtpu_ipv6, ipv6);
 // set ipv6 fields which needs to be modified from the original packet
 add_to_field(ipv6.payloadLen, 20+8+8); // IPv6(20)+UDP(8)+GTPU(8)
 modify_field(ipv6.nextHdr, 17);
 modify_field(ipv6.srcAddr, srcAddr);
 modify_field(ipv6.dstAddr, dstAddr);
 // set udp
 modify_field(udp.srcPort, srcPort); // TODO: generate from flow label, or random??
 modify_field(udp.dstPort, dstPort); // default 2123
 modify_field(udp.length_, ipv6.payloadLen-20); // Substract IPv6(20)
 // TODO: calculate checksum after updating gtpu??
 // set gtpu
 // Flags: ver:001,type:1(GTP) | 00,0(Seq),0
 modify_field(gtpu.flags, 0x30);
 modify_field(gtpu.type, type);
 modify_field(gtpu.length, udp.length_-16); // Substract UDP, GTPU header length
 modify_field(gtpu.teid, teid);
}

action gtpu_decap_v6() {
 copy_header(ipv6, gtpu_ipv6);
 remove_header(udp);
 remove_header(gtpu);
 remove_header(gtpu_ipv6);
}
# 22 "p4srv6.p4" 2

/*** ACTIONS ***/

action _nop() {
 // no operation
}
action _drop() {
 drop();
}
action forward(port,dmac) {
 modify_field(standard_metadata.egress_spec, port);
        modify_field(ethernet.dstAddr, dmac);
}

/*** TABLES ***/

table fwd {
 reads {
        standard_metadata.ingress_port: exact;
    }
    actions {forward; _drop;}
    // size : 8
}

// SRv6 Tables
table srv6_localsid {
 reads {
  ipv6.dstAddr: exact; // TODO: should be lpm/masked match?
 }
 actions {
  srv6_T_Insert1; srv6_T_Insert2; srv6_T_Insert3;
  srv6_T_Encaps2; srv6_T_Encaps1; srv6_T_Encaps3;
  srv6_T_Encaps_Red2; srv6_T_Encaps_Red3;
  srv6_End0; srv6_End1;
  srv6_End_DT6;
  srv6_End_M_GTP6_D2; srv6_End_M_GTP6_D3;
  srv6_End_M_GTP6_E;
 }
}

// GTP Tables
table gtpu_v6 {
 reads {
  ipv6.dstAddr: exact; // TODO: should be lpm/masked match?
 }
 actions {
  gtpu_encap_v6;
  gtpu_decap_v6;
 }
}

///// CONTROL /////////////////////////////////////////////
control ingress{
    apply(fwd);
 //apply(gtpu_v6);
 apply(srv6_localsid);
}
